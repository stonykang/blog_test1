# GitLab CI/CD 파이프라인 설정
image: node:18-alpine

# 캐시 설정으로 빌드 속도 향상
cache:
  paths:
    - node_modules/
    - .next/cache/

# 빌드 단계 정의
stages:
  - install
  - test
  - build
  - deploy

# 환경 변수 설정
variables:
  NODE_ENV: "production"
  NEXT_PUBLIC_SITE_NAME: "제주 여행일기"
  NEXT_PUBLIC_SITE_DESCRIPTION: "제주도 여행 정보와 문화를 공유하는 블로그"

# 의존성 설치
install_dependencies:
  stage: install
  script:
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - node_modules/
    expire_in: 1 hour
  only:
    - main
    - develop

# 코드 품질 검사
code_quality:
  stage: test
  script:
    - npm run lint
    - npm run type-check
  dependencies:
    - install_dependencies
  only:
    - main
    - develop

# 프로덕션 빌드
build_production:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - .next/
      - out/
    expire_in: 1 hour
  dependencies:
    - install_dependencies
  only:
    - main

# GitLab Pages 배포 (정적 사이트)
pages:
  stage: deploy
  script:
    - npm run export
    - mkdir public
    - cp -r out/* public/
  artifacts:
    paths:
      - public
  dependencies:
    - build_production
  only:
    - main

# Vercel 배포 (선택사항)
deploy_vercel:
  stage: deploy
  image: node:18-alpine
  before_script:
    - npm install -g vercel
  script:
    - vercel --token $VERCEL_TOKEN --prod --yes
  dependencies:
    - build_production
  only:
    - main
  when: manual  # 수동 실행

# 개발 환경 배포
deploy_staging:
  stage: deploy
  script:
    - npm run build
    - npm run export
    - mkdir public
    - cp -r out/* public/
  artifacts:
    paths:
      - public
  environment:
    name: staging
    url: https://$CI_PROJECT_NAMESPACE.gitlab.io/$CI_PROJECT_NAME
  dependencies:
    - install_dependencies
  only:
    - develop 